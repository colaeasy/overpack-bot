import random
import asyncio
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import logging

API_TOKEN = '7852208865:AAE8kHFPEPid7YUu52dYh1X5voV_d-aaR1o'
CHANNEL_USERNAME = '@OverpackTG'
ADMIN_ID = 859439617
ADMIN_TELEGRAM = '@OverpackTG'  # –¢–µ–ª–µ–≥—Ä–∞–º –∞–¥–º–∏–Ω–∞/–ø—Ä–æ–¥–∞–≤—Ü–∞

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

allowed_users = set()
last_spin_time = {}  # —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∫—Ä—É—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

spin_inline_keyboard = InlineKeyboardMarkup().add(
    InlineKeyboardButton("üé∞ –ö—Ä—É—Ç–∏—Ç—å –∫–æ–ª–µ—Å–æ", callback_data="spin")
)

request_access_keyboard = InlineKeyboardMarkup().add(
    InlineKeyboardButton("‚è© –•–æ—á—É –∫—Ä—É—Ç–∏—Ç—å", callback_data="request_access")
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –≤—ã–ø–∞–¥–µ–Ω–∏—è –ø—Ä–∏–∑–æ–≤
prizes = [
    ("üî• –£–≥–æ–ª—å", 35),
    ("üí∏ –°–∫–∏–¥–∫–∞ 5% –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –ø–æ–∫—É–ø–∫—É", 30),
    ("üç¨ –¢–∞–±–∞–∫ –Ω–∞ –≤—ã–±–æ—Ä", 20),
    ("‚ùå –ü—É—Å—Ç–æ", 10),
    ("üé≤ –†–µ–¥–∫–∏–π –ø—Ä–∏–∑", 5)
]

prize_list = [prize for prize, weight in prizes for _ in range(weight)]

async def is_subscribed(user_id):
    try:
        member = await bot.get_chat_member(CHANNEL_USERNAME, user_id)
        return member.status in ('member', 'creator', 'administrator')
    except:
        return False

@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    user_id = message.from_user.id

    photo_path = '–ü—Ä–∏–≤–µ—Ç—Å–≤–∏–µ.png'
    caption = (
        "üéâ <b>–ù—É —á—Ç–æ, –¥—Ä—É–∂–∏—â–µ, –≥–æ—Ç–æ–≤ –∏—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É?</b>\n\n"
        "–ñ–º–∏ –∫–Ω–æ–ø–∫—É ¬´‚è© –•–æ—á—É –∫—Ä—É—Ç–∏—Ç—å¬ª, –∏ –µ—Å–ª–∏ –ø—Ä–æ–¥–∞–≤–µ—Ü —Å–µ–≥–æ–¥–Ω—è –≤ –¥—É—Ö–µ ‚Äî —Å—Ä–∞–∑—É –ø–æ–ª—É—á–∏—à—å –æ–¥–æ–±—Ä–µ–Ω–∏–µ! üòâ\n\n"
        "üí° <i>P.S. –¢–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ –Ω–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞ @OverpackTG –∏–º–µ—é—Ç –ø—Ä–∞–≤–æ –∫—Ä—É—Ç–∏—Ç—å –∫–æ–ª–µ—Å–æ.</i>\n"
        "–ï—Å–ª–∏ —Ç—ã –µ—â—ë –Ω–µ —Å –Ω–∞–º–∏ ‚Äî –±—ã—Å—Ç—Ä–µ–Ω—å–∫–æ –ø–æ–¥–ø–∏—à–∏—Å—å –∏ –ø—Ä–æ–≤–µ—Ä—è–π –ø–æ–¥–ø–∏—Å–∫—É –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ.üëá"
    )

    keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton("‚è© –•–æ—á—É –∫—Ä—É—Ç–∏—Ç—å", callback_data="request_access"),
        InlineKeyboardButton("üì© –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_sub")
    )

    with open(photo_path, 'rb') as photo:
        await bot.send_photo(chat_id=user_id, photo=photo, caption=caption, parse_mode='HTML', reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data == "request_access")
async def handle_request_access(callback_query: types.CallbackQuery):
    user = callback_query.from_user
    user_id = user.id
    if user_id in allowed_users:
        return await callback_query.answer("–¢—ã —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ!")

    text = (
        "üì© –ó–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–∞ –∫ –∫—Ä—É—Ç–∫–µ\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username or '–ë–µ–∑ –Ω–∏–∫–∞'}\n"
        f"üÜî ID: {user_id}"
    )
    keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton("‚úÖ –†–∞–∑—Ä–µ—à–∏—Ç—å", callback_data=f"approve_{user_id}"),
        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"deny_{user_id}")
    )
    await bot.send_message(chat_id=ADMIN_ID, text=text, reply_markup=keyboard)
    await bot.send_message(user_id, "üì¨ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É. –ñ–¥–∏ –æ–¥–æ–±—Ä–µ–Ω–∏—è üôå")
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data.startswith("approve_"))
async def approve_user(callback_query: types.CallbackQuery):
    user_id = int(callback_query.data.split("_")[1])
    allowed_users.add(user_id)
    await bot.send_message(user_id, "‚úÖ –ê–¥–º–∏–Ω –æ–¥–æ–±—Ä–∏–ª ‚Äî —Ç–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –∫—Ä—É—Ç–∏—Ç—å –∫–æ–ª–µ—Å–æ! üé°", reply_markup=spin_inline_keyboard)
    await callback_query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–¥–æ–±—Ä–µ–Ω ‚úÖ")

@dp.callback_query_handler(lambda c: c.data.startswith("deny_"))
async def deny_user(callback_query: types.CallbackQuery):
    user_id = int(callback_query.data.split("_")[1])
    await bot.send_message(user_id, "‚ùå –î–æ—Å—Ç—É–ø –Ω–µ –æ–¥–æ–±—Ä–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ —É—Ç–æ—á–Ω–∏ —É –ø—Ä–æ–¥–∞–≤—Ü–∞.")
    await callback_query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω—ë–Ω ‚ùå")

@dp.callback_query_handler(lambda c: c.data == "check_sub")
async def check_subscription(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    if await is_subscribed(user_id):
        await bot.send_message(user_id, "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –¥–æ—Å—Ç—É–ø–∞.", reply_markup=request_access_keyboard)
    else:
        await callback_query.answer("‚ùå –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å", show_alert=True)

@dp.callback_query_handler(lambda c: c.data == "spin")
async def spin_wheel(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    if user_id not in allowed_users:
        return await callback_query.answer("–¢—ã –ø–æ–∫–∞ –Ω–µ –≤ —Å–ø–∏—Å–∫–µ. –ó–∞–ø—Ä–æ—Å–∏ –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ /start", show_alert=True)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ 24 —á–∞—Å–∞
    current_time = datetime.now()
    if user_id in last_spin_time and current_time - last_spin_time[user_id] < timedelta(hours=24):
        next_spin = last_spin_time[user_id] + timedelta(hours=24)
        wait_time = next_spin - current_time
        hours, remainder = divmod(wait_time.seconds, 3600)
        minutes, _ = divmod(remainder, 60)
        return await bot.send_message(user_id, f"‚è≥ –ü–æ–¥–æ–∂–¥–∏ –µ—â–µ {hours} —á. {minutes} –º–∏–Ω. –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –∫—Ä—É—Ç–∫–∏!")

    last_spin_time[user_id] = current_time

    await bot.send_message(user_id, "üé° –ö—Ä—É—Ç–∏–º –∫–æ–ª–µ—Å–æ...\nüïì 3...\nüïì 2...\nüïì 1...\nü•Å ...")
    await asyncio.sleep(3)

    prize = random.choice(prize_list)
    if prize == "‚ùå –ü—É—Å—Ç–æ":
        await bot.send_message(user_id, "ü§∑‚Äç‚ôÇÔ∏è –£–≤—ã, —Å–µ–≥–æ–¥–Ω—è –±–µ–∑ –ø—Ä–∏–∑–∞. –ü–æ–≤–µ–∑—ë—Ç –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!")
    elif prize == "üé≤ –†–µ–¥–∫–∏–π –ø—Ä–∏–∑":
        await bot.send_message(user_id, f"üé≤ –¢—ã –≤—ã–∏–≥—Ä–∞–ª —Ä–µ–¥–∫–∏–π –ø—Ä–∏–∑! –ù–∞–ø–∏—à–∏ –ø—Ä–æ–¥–∞–≤—Ü—É {ADMIN_TELEGRAM} –∏ —É–∑–Ω–∞–π, —á—Ç–æ —Ç–µ–±–µ –ø—Ä–∏—á–∏—Ç–∞–µ—Ç—Å—è üòâ")
    else:
        await bot.send_message(user_id, f"üéÅ –¢–µ–±–µ –≤—ã–ø–∞–ª–æ: {prize}\n–ü–æ–∫–∞–∂–∏ —ç—Ç–æ –ø—Ä–æ–¥–∞–≤—Ü—É –∏ –ø–æ–ª—É—á–∏ –ø—Ä–∏–∑! üéâ")

    log_text = f"üé° –ö—Ä—É—Ç–∫–∞:\nüë§ @{callback_query.from_user.username or '–ë–µ–∑ –Ω–∏–∫–∞'}\nüÜî ID: {user_id}\nüéÅ –ü—Ä–∏–∑: {prize}\nüïí –í—Ä–µ–º—è: {current_time.strftime('%Y-%m-%d %H:%M:%S')}"
    await bot.send_message(chat_id=ADMIN_ID, text=log_text)
    await callback_query.answer()

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
